// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package helm

import (
	context "context"
	"sync"
)

// Ensure, that PullRendererMock does implement PullRenderer.
// If this is not the case, regenerate this file with moq.
var _ PullRenderer = &PullRendererMock{}

// PullRendererMock is a mock implementation of PullRenderer.
//
//	func TestSomethingThatUsesPullRenderer(t *testing.T) {
//
//		// make and configure a mocked PullRenderer
//		mockedPullRenderer := &PullRendererMock{
//			PullFunc: func(contextMoqParam context.Context, pullOptions PullOptions) error {
//				panic("mock out the Pull method")
//			},
//			RenderFunc: func(ctx context.Context, opts RenderOpts) error {
//				panic("mock out the Render method")
//			},
//		}
//
//		// use mockedPullRenderer in code that requires PullRenderer
//		// and then make assertions.
//
//	}
type PullRendererMock struct {
	// PullFunc mocks the Pull method.
	PullFunc func(contextMoqParam context.Context, pullOptions PullOptions) error

	// RenderFunc mocks the Render method.
	RenderFunc func(ctx context.Context, opts RenderOpts) error

	// calls tracks calls to the methods.
	calls struct {
		// Pull holds details about calls to the Pull method.
		Pull []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PullOptions is the pullOptions argument value.
			PullOptions PullOptions
		}
		// Render holds details about calls to the Render method.
		Render []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts RenderOpts
		}
	}
	lockPull   sync.RWMutex
	lockRender sync.RWMutex
}

// Pull calls PullFunc.
func (mock *PullRendererMock) Pull(contextMoqParam context.Context, pullOptions PullOptions) error {
	callInfo := struct {
		ContextMoqParam context.Context
		PullOptions     PullOptions
	}{
		ContextMoqParam: contextMoqParam,
		PullOptions:     pullOptions,
	}
	mock.lockPull.Lock()
	mock.calls.Pull = append(mock.calls.Pull, callInfo)
	mock.lockPull.Unlock()
	if mock.PullFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.PullFunc(contextMoqParam, pullOptions)
}

// PullCalls gets all the calls that were made to Pull.
// Check the length with:
//
//	len(mockedPullRenderer.PullCalls())
func (mock *PullRendererMock) PullCalls() []struct {
	ContextMoqParam context.Context
	PullOptions     PullOptions
} {
	var calls []struct {
		ContextMoqParam context.Context
		PullOptions     PullOptions
	}
	mock.lockPull.RLock()
	calls = mock.calls.Pull
	mock.lockPull.RUnlock()
	return calls
}

// Render calls RenderFunc.
func (mock *PullRendererMock) Render(ctx context.Context, opts RenderOpts) error {
	callInfo := struct {
		Ctx  context.Context
		Opts RenderOpts
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockRender.Lock()
	mock.calls.Render = append(mock.calls.Render, callInfo)
	mock.lockRender.Unlock()
	if mock.RenderFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.RenderFunc(ctx, opts)
}

// RenderCalls gets all the calls that were made to Render.
// Check the length with:
//
//	len(mockedPullRenderer.RenderCalls())
func (mock *PullRendererMock) RenderCalls() []struct {
	Ctx  context.Context
	Opts RenderOpts
} {
	var calls []struct {
		Ctx  context.Context
		Opts RenderOpts
	}
	mock.lockRender.RLock()
	calls = mock.calls.Render
	mock.lockRender.RUnlock()
	return calls
}
