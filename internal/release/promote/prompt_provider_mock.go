// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package promote

import (
	"github.com/nestoca/joy/api/v1alpha1"
	"github.com/nestoca/joy/internal/release/cross"
	"github.com/nestoca/joy/internal/yml"
	"sync"
)

// Ensure, that PromptProviderMock does implement PromptProvider.
// If this is not the case, regenerate this file with moq.
var _ PromptProvider = &PromptProviderMock{}

// PromptProviderMock is a mock implementation of PromptProvider.
//
//	func TestSomethingThatUsesPromptProvider(t *testing.T) {
//
//		// make and configure a mocked PromptProvider
//		mockedPromptProvider := &PromptProviderMock{
//			ConfirmAutoMergePullRequestFunc: func() (bool, error) {
//				panic("mock out the ConfirmAutoMergePullRequest method")
//			},
//			ConfirmCreatingPromotionPullRequestFunc: func(autoMerge bool, draft bool) (bool, error) {
//				panic("mock out the ConfirmCreatingPromotionPullRequest method")
//			},
//			PrintBranchCreatedFunc: func(branchName string, message string)  {
//				panic("mock out the PrintBranchCreated method")
//			},
//			PrintCanceledFunc: func()  {
//				panic("mock out the PrintCanceled method")
//			},
//			PrintCompletedFunc: func()  {
//				panic("mock out the PrintCompleted method")
//			},
//			PrintDraftPullRequestCreatedFunc: func(url string)  {
//				panic("mock out the PrintDraftPullRequestCreated method")
//			},
//			PrintEndPreviewFunc: func()  {
//				panic("mock out the PrintEndPreview method")
//			},
//			PrintNoPromotableEnvironmentFoundFunc: func(environmentsFiltered bool)  {
//				panic("mock out the PrintNoPromotableEnvironmentFound method")
//			},
//			PrintNoPromotableReleasesFoundFunc: func(releasesFiltered bool, sourceEnv *v1alpha1.Environment, targetEnv *v1alpha1.Environment)  {
//				panic("mock out the PrintNoPromotableReleasesFound method")
//			},
//			PrintPullRequestCreatedFunc: func(url string)  {
//				panic("mock out the PrintPullRequestCreated method")
//			},
//			PrintReleasePreviewFunc: func(targetEnvName string, releaseName string, existingTargetFile *yml.File, promotedFile *yml.File) error {
//				panic("mock out the PrintReleasePreview method")
//			},
//			PrintSelectedNonPromotableReleasesFunc: func(invalidReleases string, targetEnvName string)  {
//				panic("mock out the PrintSelectedNonPromotableReleases method")
//			},
//			PrintStartPreviewFunc: func()  {
//				panic("mock out the PrintStartPreview method")
//			},
//			PrintUpdatingTargetReleaseFunc: func(targetEnvName string, releaseName string, releaseFilePath string, isCreating bool)  {
//				panic("mock out the PrintUpdatingTargetRelease method")
//			},
//			SelectPromotionActionFunc: func() (string, error) {
//				panic("mock out the SelectPromotionAction method")
//			},
//			SelectReleasesFunc: func(list cross.ReleaseList, maxColumnWidth int) (cross.ReleaseList, error) {
//				panic("mock out the SelectReleases method")
//			},
//			SelectSourceEnvironmentFunc: func(environments []*v1alpha1.Environment) (*v1alpha1.Environment, error) {
//				panic("mock out the SelectSourceEnvironment method")
//			},
//			SelectTargetEnvironmentFunc: func(environments []*v1alpha1.Environment) (*v1alpha1.Environment, error) {
//				panic("mock out the SelectTargetEnvironment method")
//			},
//		}
//
//		// use mockedPromptProvider in code that requires PromptProvider
//		// and then make assertions.
//
//	}
type PromptProviderMock struct {
	// ConfirmAutoMergePullRequestFunc mocks the ConfirmAutoMergePullRequest method.
	ConfirmAutoMergePullRequestFunc func() (bool, error)

	// ConfirmCreatingPromotionPullRequestFunc mocks the ConfirmCreatingPromotionPullRequest method.
	ConfirmCreatingPromotionPullRequestFunc func(autoMerge bool, draft bool) (bool, error)

	// PrintBranchCreatedFunc mocks the PrintBranchCreated method.
	PrintBranchCreatedFunc func(branchName string, message string)

	// PrintCanceledFunc mocks the PrintCanceled method.
	PrintCanceledFunc func()

	// PrintCompletedFunc mocks the PrintCompleted method.
	PrintCompletedFunc func()

	// PrintDraftPullRequestCreatedFunc mocks the PrintDraftPullRequestCreated method.
	PrintDraftPullRequestCreatedFunc func(url string)

	// PrintEndPreviewFunc mocks the PrintEndPreview method.
	PrintEndPreviewFunc func()

	// PrintNoPromotableEnvironmentFoundFunc mocks the PrintNoPromotableEnvironmentFound method.
	PrintNoPromotableEnvironmentFoundFunc func(environmentsFiltered bool)

	// PrintNoPromotableReleasesFoundFunc mocks the PrintNoPromotableReleasesFound method.
	PrintNoPromotableReleasesFoundFunc func(releasesFiltered bool, sourceEnv *v1alpha1.Environment, targetEnv *v1alpha1.Environment)

	// PrintPullRequestCreatedFunc mocks the PrintPullRequestCreated method.
	PrintPullRequestCreatedFunc func(url string)

	// PrintReleasePreviewFunc mocks the PrintReleasePreview method.
	PrintReleasePreviewFunc func(targetEnvName string, releaseName string, existingTargetFile *yml.File, promotedFile *yml.File) error

	// PrintSelectedNonPromotableReleasesFunc mocks the PrintSelectedNonPromotableReleases method.
	PrintSelectedNonPromotableReleasesFunc func(invalidReleases string, targetEnvName string)

	// PrintStartPreviewFunc mocks the PrintStartPreview method.
	PrintStartPreviewFunc func()

	// PrintUpdatingTargetReleaseFunc mocks the PrintUpdatingTargetRelease method.
	PrintUpdatingTargetReleaseFunc func(targetEnvName string, releaseName string, releaseFilePath string, isCreating bool)

	// SelectPromotionActionFunc mocks the SelectPromotionAction method.
	SelectPromotionActionFunc func() (string, error)

	// SelectReleasesFunc mocks the SelectReleases method.
	SelectReleasesFunc func(list cross.ReleaseList, maxColumnWidth int) (cross.ReleaseList, error)

	// SelectSourceEnvironmentFunc mocks the SelectSourceEnvironment method.
	SelectSourceEnvironmentFunc func(environments []*v1alpha1.Environment) (*v1alpha1.Environment, error)

	// SelectTargetEnvironmentFunc mocks the SelectTargetEnvironment method.
	SelectTargetEnvironmentFunc func(environments []*v1alpha1.Environment) (*v1alpha1.Environment, error)

	// calls tracks calls to the methods.
	calls struct {
		// ConfirmAutoMergePullRequest holds details about calls to the ConfirmAutoMergePullRequest method.
		ConfirmAutoMergePullRequest []struct {
		}
		// ConfirmCreatingPromotionPullRequest holds details about calls to the ConfirmCreatingPromotionPullRequest method.
		ConfirmCreatingPromotionPullRequest []struct {
			// AutoMerge is the autoMerge argument value.
			AutoMerge bool
			// Draft is the draft argument value.
			Draft bool
		}
		// PrintBranchCreated holds details about calls to the PrintBranchCreated method.
		PrintBranchCreated []struct {
			// BranchName is the branchName argument value.
			BranchName string
			// Message is the message argument value.
			Message string
		}
		// PrintCanceled holds details about calls to the PrintCanceled method.
		PrintCanceled []struct {
		}
		// PrintCompleted holds details about calls to the PrintCompleted method.
		PrintCompleted []struct {
		}
		// PrintDraftPullRequestCreated holds details about calls to the PrintDraftPullRequestCreated method.
		PrintDraftPullRequestCreated []struct {
			// URL is the url argument value.
			URL string
		}
		// PrintEndPreview holds details about calls to the PrintEndPreview method.
		PrintEndPreview []struct {
		}
		// PrintNoPromotableEnvironmentFound holds details about calls to the PrintNoPromotableEnvironmentFound method.
		PrintNoPromotableEnvironmentFound []struct {
			// EnvironmentsFiltered is the environmentsFiltered argument value.
			EnvironmentsFiltered bool
		}
		// PrintNoPromotableReleasesFound holds details about calls to the PrintNoPromotableReleasesFound method.
		PrintNoPromotableReleasesFound []struct {
			// ReleasesFiltered is the releasesFiltered argument value.
			ReleasesFiltered bool
			// SourceEnv is the sourceEnv argument value.
			SourceEnv *v1alpha1.Environment
			// TargetEnv is the targetEnv argument value.
			TargetEnv *v1alpha1.Environment
		}
		// PrintPullRequestCreated holds details about calls to the PrintPullRequestCreated method.
		PrintPullRequestCreated []struct {
			// URL is the url argument value.
			URL string
		}
		// PrintReleasePreview holds details about calls to the PrintReleasePreview method.
		PrintReleasePreview []struct {
			// TargetEnvName is the targetEnvName argument value.
			TargetEnvName string
			// ReleaseName is the releaseName argument value.
			ReleaseName string
			// ExistingTargetFile is the existingTargetFile argument value.
			ExistingTargetFile *yml.File
			// PromotedFile is the promotedFile argument value.
			PromotedFile *yml.File
		}
		// PrintSelectedNonPromotableReleases holds details about calls to the PrintSelectedNonPromotableReleases method.
		PrintSelectedNonPromotableReleases []struct {
			// InvalidReleases is the invalidReleases argument value.
			InvalidReleases string
			// TargetEnvName is the targetEnvName argument value.
			TargetEnvName string
		}
		// PrintStartPreview holds details about calls to the PrintStartPreview method.
		PrintStartPreview []struct {
		}
		// PrintUpdatingTargetRelease holds details about calls to the PrintUpdatingTargetRelease method.
		PrintUpdatingTargetRelease []struct {
			// TargetEnvName is the targetEnvName argument value.
			TargetEnvName string
			// ReleaseName is the releaseName argument value.
			ReleaseName string
			// ReleaseFilePath is the releaseFilePath argument value.
			ReleaseFilePath string
			// IsCreating is the isCreating argument value.
			IsCreating bool
		}
		// SelectPromotionAction holds details about calls to the SelectPromotionAction method.
		SelectPromotionAction []struct {
		}
		// SelectReleases holds details about calls to the SelectReleases method.
		SelectReleases []struct {
			// List is the list argument value.
			List cross.ReleaseList
			// MaxColumnWidth is the maxColumnWidth argument value.
			MaxColumnWidth int
		}
		// SelectSourceEnvironment holds details about calls to the SelectSourceEnvironment method.
		SelectSourceEnvironment []struct {
			// Environments is the environments argument value.
			Environments []*v1alpha1.Environment
		}
		// SelectTargetEnvironment holds details about calls to the SelectTargetEnvironment method.
		SelectTargetEnvironment []struct {
			// Environments is the environments argument value.
			Environments []*v1alpha1.Environment
		}
	}
	lockConfirmAutoMergePullRequest         sync.RWMutex
	lockConfirmCreatingPromotionPullRequest sync.RWMutex
	lockPrintBranchCreated                  sync.RWMutex
	lockPrintCanceled                       sync.RWMutex
	lockPrintCompleted                      sync.RWMutex
	lockPrintDraftPullRequestCreated        sync.RWMutex
	lockPrintEndPreview                     sync.RWMutex
	lockPrintNoPromotableEnvironmentFound   sync.RWMutex
	lockPrintNoPromotableReleasesFound      sync.RWMutex
	lockPrintPullRequestCreated             sync.RWMutex
	lockPrintReleasePreview                 sync.RWMutex
	lockPrintSelectedNonPromotableReleases  sync.RWMutex
	lockPrintStartPreview                   sync.RWMutex
	lockPrintUpdatingTargetRelease          sync.RWMutex
	lockSelectPromotionAction               sync.RWMutex
	lockSelectReleases                      sync.RWMutex
	lockSelectSourceEnvironment             sync.RWMutex
	lockSelectTargetEnvironment             sync.RWMutex
}

// ConfirmAutoMergePullRequest calls ConfirmAutoMergePullRequestFunc.
func (mock *PromptProviderMock) ConfirmAutoMergePullRequest() (bool, error) {
	callInfo := struct {
	}{}
	mock.lockConfirmAutoMergePullRequest.Lock()
	mock.calls.ConfirmAutoMergePullRequest = append(mock.calls.ConfirmAutoMergePullRequest, callInfo)
	mock.lockConfirmAutoMergePullRequest.Unlock()
	if mock.ConfirmAutoMergePullRequestFunc == nil {
		var (
			bOut   bool
			errOut error
		)
		return bOut, errOut
	}
	return mock.ConfirmAutoMergePullRequestFunc()
}

// ConfirmAutoMergePullRequestCalls gets all the calls that were made to ConfirmAutoMergePullRequest.
// Check the length with:
//
//	len(mockedPromptProvider.ConfirmAutoMergePullRequestCalls())
func (mock *PromptProviderMock) ConfirmAutoMergePullRequestCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConfirmAutoMergePullRequest.RLock()
	calls = mock.calls.ConfirmAutoMergePullRequest
	mock.lockConfirmAutoMergePullRequest.RUnlock()
	return calls
}

// ConfirmCreatingPromotionPullRequest calls ConfirmCreatingPromotionPullRequestFunc.
func (mock *PromptProviderMock) ConfirmCreatingPromotionPullRequest(autoMerge bool, draft bool) (bool, error) {
	callInfo := struct {
		AutoMerge bool
		Draft     bool
	}{
		AutoMerge: autoMerge,
		Draft:     draft,
	}
	mock.lockConfirmCreatingPromotionPullRequest.Lock()
	mock.calls.ConfirmCreatingPromotionPullRequest = append(mock.calls.ConfirmCreatingPromotionPullRequest, callInfo)
	mock.lockConfirmCreatingPromotionPullRequest.Unlock()
	if mock.ConfirmCreatingPromotionPullRequestFunc == nil {
		var (
			bOut   bool
			errOut error
		)
		return bOut, errOut
	}
	return mock.ConfirmCreatingPromotionPullRequestFunc(autoMerge, draft)
}

// ConfirmCreatingPromotionPullRequestCalls gets all the calls that were made to ConfirmCreatingPromotionPullRequest.
// Check the length with:
//
//	len(mockedPromptProvider.ConfirmCreatingPromotionPullRequestCalls())
func (mock *PromptProviderMock) ConfirmCreatingPromotionPullRequestCalls() []struct {
	AutoMerge bool
	Draft     bool
} {
	var calls []struct {
		AutoMerge bool
		Draft     bool
	}
	mock.lockConfirmCreatingPromotionPullRequest.RLock()
	calls = mock.calls.ConfirmCreatingPromotionPullRequest
	mock.lockConfirmCreatingPromotionPullRequest.RUnlock()
	return calls
}

// PrintBranchCreated calls PrintBranchCreatedFunc.
func (mock *PromptProviderMock) PrintBranchCreated(branchName string, message string) {
	callInfo := struct {
		BranchName string
		Message    string
	}{
		BranchName: branchName,
		Message:    message,
	}
	mock.lockPrintBranchCreated.Lock()
	mock.calls.PrintBranchCreated = append(mock.calls.PrintBranchCreated, callInfo)
	mock.lockPrintBranchCreated.Unlock()
	if mock.PrintBranchCreatedFunc == nil {
		return
	}
	mock.PrintBranchCreatedFunc(branchName, message)
}

// PrintBranchCreatedCalls gets all the calls that were made to PrintBranchCreated.
// Check the length with:
//
//	len(mockedPromptProvider.PrintBranchCreatedCalls())
func (mock *PromptProviderMock) PrintBranchCreatedCalls() []struct {
	BranchName string
	Message    string
} {
	var calls []struct {
		BranchName string
		Message    string
	}
	mock.lockPrintBranchCreated.RLock()
	calls = mock.calls.PrintBranchCreated
	mock.lockPrintBranchCreated.RUnlock()
	return calls
}

// PrintCanceled calls PrintCanceledFunc.
func (mock *PromptProviderMock) PrintCanceled() {
	callInfo := struct {
	}{}
	mock.lockPrintCanceled.Lock()
	mock.calls.PrintCanceled = append(mock.calls.PrintCanceled, callInfo)
	mock.lockPrintCanceled.Unlock()
	if mock.PrintCanceledFunc == nil {
		return
	}
	mock.PrintCanceledFunc()
}

// PrintCanceledCalls gets all the calls that were made to PrintCanceled.
// Check the length with:
//
//	len(mockedPromptProvider.PrintCanceledCalls())
func (mock *PromptProviderMock) PrintCanceledCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPrintCanceled.RLock()
	calls = mock.calls.PrintCanceled
	mock.lockPrintCanceled.RUnlock()
	return calls
}

// PrintCompleted calls PrintCompletedFunc.
func (mock *PromptProviderMock) PrintCompleted() {
	callInfo := struct {
	}{}
	mock.lockPrintCompleted.Lock()
	mock.calls.PrintCompleted = append(mock.calls.PrintCompleted, callInfo)
	mock.lockPrintCompleted.Unlock()
	if mock.PrintCompletedFunc == nil {
		return
	}
	mock.PrintCompletedFunc()
}

// PrintCompletedCalls gets all the calls that were made to PrintCompleted.
// Check the length with:
//
//	len(mockedPromptProvider.PrintCompletedCalls())
func (mock *PromptProviderMock) PrintCompletedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPrintCompleted.RLock()
	calls = mock.calls.PrintCompleted
	mock.lockPrintCompleted.RUnlock()
	return calls
}

// PrintDraftPullRequestCreated calls PrintDraftPullRequestCreatedFunc.
func (mock *PromptProviderMock) PrintDraftPullRequestCreated(url string) {
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	mock.lockPrintDraftPullRequestCreated.Lock()
	mock.calls.PrintDraftPullRequestCreated = append(mock.calls.PrintDraftPullRequestCreated, callInfo)
	mock.lockPrintDraftPullRequestCreated.Unlock()
	if mock.PrintDraftPullRequestCreatedFunc == nil {
		return
	}
	mock.PrintDraftPullRequestCreatedFunc(url)
}

// PrintDraftPullRequestCreatedCalls gets all the calls that were made to PrintDraftPullRequestCreated.
// Check the length with:
//
//	len(mockedPromptProvider.PrintDraftPullRequestCreatedCalls())
func (mock *PromptProviderMock) PrintDraftPullRequestCreatedCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	mock.lockPrintDraftPullRequestCreated.RLock()
	calls = mock.calls.PrintDraftPullRequestCreated
	mock.lockPrintDraftPullRequestCreated.RUnlock()
	return calls
}

// PrintEndPreview calls PrintEndPreviewFunc.
func (mock *PromptProviderMock) PrintEndPreview() {
	callInfo := struct {
	}{}
	mock.lockPrintEndPreview.Lock()
	mock.calls.PrintEndPreview = append(mock.calls.PrintEndPreview, callInfo)
	mock.lockPrintEndPreview.Unlock()
	if mock.PrintEndPreviewFunc == nil {
		return
	}
	mock.PrintEndPreviewFunc()
}

// PrintEndPreviewCalls gets all the calls that were made to PrintEndPreview.
// Check the length with:
//
//	len(mockedPromptProvider.PrintEndPreviewCalls())
func (mock *PromptProviderMock) PrintEndPreviewCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPrintEndPreview.RLock()
	calls = mock.calls.PrintEndPreview
	mock.lockPrintEndPreview.RUnlock()
	return calls
}

// PrintNoPromotableEnvironmentFound calls PrintNoPromotableEnvironmentFoundFunc.
func (mock *PromptProviderMock) PrintNoPromotableEnvironmentFound(environmentsFiltered bool) {
	callInfo := struct {
		EnvironmentsFiltered bool
	}{
		EnvironmentsFiltered: environmentsFiltered,
	}
	mock.lockPrintNoPromotableEnvironmentFound.Lock()
	mock.calls.PrintNoPromotableEnvironmentFound = append(mock.calls.PrintNoPromotableEnvironmentFound, callInfo)
	mock.lockPrintNoPromotableEnvironmentFound.Unlock()
	if mock.PrintNoPromotableEnvironmentFoundFunc == nil {
		return
	}
	mock.PrintNoPromotableEnvironmentFoundFunc(environmentsFiltered)
}

// PrintNoPromotableEnvironmentFoundCalls gets all the calls that were made to PrintNoPromotableEnvironmentFound.
// Check the length with:
//
//	len(mockedPromptProvider.PrintNoPromotableEnvironmentFoundCalls())
func (mock *PromptProviderMock) PrintNoPromotableEnvironmentFoundCalls() []struct {
	EnvironmentsFiltered bool
} {
	var calls []struct {
		EnvironmentsFiltered bool
	}
	mock.lockPrintNoPromotableEnvironmentFound.RLock()
	calls = mock.calls.PrintNoPromotableEnvironmentFound
	mock.lockPrintNoPromotableEnvironmentFound.RUnlock()
	return calls
}

// PrintNoPromotableReleasesFound calls PrintNoPromotableReleasesFoundFunc.
func (mock *PromptProviderMock) PrintNoPromotableReleasesFound(releasesFiltered bool, sourceEnv *v1alpha1.Environment, targetEnv *v1alpha1.Environment) {
	callInfo := struct {
		ReleasesFiltered bool
		SourceEnv        *v1alpha1.Environment
		TargetEnv        *v1alpha1.Environment
	}{
		ReleasesFiltered: releasesFiltered,
		SourceEnv:        sourceEnv,
		TargetEnv:        targetEnv,
	}
	mock.lockPrintNoPromotableReleasesFound.Lock()
	mock.calls.PrintNoPromotableReleasesFound = append(mock.calls.PrintNoPromotableReleasesFound, callInfo)
	mock.lockPrintNoPromotableReleasesFound.Unlock()
	if mock.PrintNoPromotableReleasesFoundFunc == nil {
		return
	}
	mock.PrintNoPromotableReleasesFoundFunc(releasesFiltered, sourceEnv, targetEnv)
}

// PrintNoPromotableReleasesFoundCalls gets all the calls that were made to PrintNoPromotableReleasesFound.
// Check the length with:
//
//	len(mockedPromptProvider.PrintNoPromotableReleasesFoundCalls())
func (mock *PromptProviderMock) PrintNoPromotableReleasesFoundCalls() []struct {
	ReleasesFiltered bool
	SourceEnv        *v1alpha1.Environment
	TargetEnv        *v1alpha1.Environment
} {
	var calls []struct {
		ReleasesFiltered bool
		SourceEnv        *v1alpha1.Environment
		TargetEnv        *v1alpha1.Environment
	}
	mock.lockPrintNoPromotableReleasesFound.RLock()
	calls = mock.calls.PrintNoPromotableReleasesFound
	mock.lockPrintNoPromotableReleasesFound.RUnlock()
	return calls
}

// PrintPullRequestCreated calls PrintPullRequestCreatedFunc.
func (mock *PromptProviderMock) PrintPullRequestCreated(url string) {
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	mock.lockPrintPullRequestCreated.Lock()
	mock.calls.PrintPullRequestCreated = append(mock.calls.PrintPullRequestCreated, callInfo)
	mock.lockPrintPullRequestCreated.Unlock()
	if mock.PrintPullRequestCreatedFunc == nil {
		return
	}
	mock.PrintPullRequestCreatedFunc(url)
}

// PrintPullRequestCreatedCalls gets all the calls that were made to PrintPullRequestCreated.
// Check the length with:
//
//	len(mockedPromptProvider.PrintPullRequestCreatedCalls())
func (mock *PromptProviderMock) PrintPullRequestCreatedCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	mock.lockPrintPullRequestCreated.RLock()
	calls = mock.calls.PrintPullRequestCreated
	mock.lockPrintPullRequestCreated.RUnlock()
	return calls
}

// PrintReleasePreview calls PrintReleasePreviewFunc.
func (mock *PromptProviderMock) PrintReleasePreview(targetEnvName string, releaseName string, existingTargetFile *yml.File, promotedFile *yml.File) error {
	callInfo := struct {
		TargetEnvName      string
		ReleaseName        string
		ExistingTargetFile *yml.File
		PromotedFile       *yml.File
	}{
		TargetEnvName:      targetEnvName,
		ReleaseName:        releaseName,
		ExistingTargetFile: existingTargetFile,
		PromotedFile:       promotedFile,
	}
	mock.lockPrintReleasePreview.Lock()
	mock.calls.PrintReleasePreview = append(mock.calls.PrintReleasePreview, callInfo)
	mock.lockPrintReleasePreview.Unlock()
	if mock.PrintReleasePreviewFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.PrintReleasePreviewFunc(targetEnvName, releaseName, existingTargetFile, promotedFile)
}

// PrintReleasePreviewCalls gets all the calls that were made to PrintReleasePreview.
// Check the length with:
//
//	len(mockedPromptProvider.PrintReleasePreviewCalls())
func (mock *PromptProviderMock) PrintReleasePreviewCalls() []struct {
	TargetEnvName      string
	ReleaseName        string
	ExistingTargetFile *yml.File
	PromotedFile       *yml.File
} {
	var calls []struct {
		TargetEnvName      string
		ReleaseName        string
		ExistingTargetFile *yml.File
		PromotedFile       *yml.File
	}
	mock.lockPrintReleasePreview.RLock()
	calls = mock.calls.PrintReleasePreview
	mock.lockPrintReleasePreview.RUnlock()
	return calls
}

// PrintSelectedNonPromotableReleases calls PrintSelectedNonPromotableReleasesFunc.
func (mock *PromptProviderMock) PrintSelectedNonPromotableReleases(invalidReleases string, targetEnvName string) {
	callInfo := struct {
		InvalidReleases string
		TargetEnvName   string
	}{
		InvalidReleases: invalidReleases,
		TargetEnvName:   targetEnvName,
	}
	mock.lockPrintSelectedNonPromotableReleases.Lock()
	mock.calls.PrintSelectedNonPromotableReleases = append(mock.calls.PrintSelectedNonPromotableReleases, callInfo)
	mock.lockPrintSelectedNonPromotableReleases.Unlock()
	if mock.PrintSelectedNonPromotableReleasesFunc == nil {
		return
	}
	mock.PrintSelectedNonPromotableReleasesFunc(invalidReleases, targetEnvName)
}

// PrintSelectedNonPromotableReleasesCalls gets all the calls that were made to PrintSelectedNonPromotableReleases.
// Check the length with:
//
//	len(mockedPromptProvider.PrintSelectedNonPromotableReleasesCalls())
func (mock *PromptProviderMock) PrintSelectedNonPromotableReleasesCalls() []struct {
	InvalidReleases string
	TargetEnvName   string
} {
	var calls []struct {
		InvalidReleases string
		TargetEnvName   string
	}
	mock.lockPrintSelectedNonPromotableReleases.RLock()
	calls = mock.calls.PrintSelectedNonPromotableReleases
	mock.lockPrintSelectedNonPromotableReleases.RUnlock()
	return calls
}

// PrintStartPreview calls PrintStartPreviewFunc.
func (mock *PromptProviderMock) PrintStartPreview() {
	callInfo := struct {
	}{}
	mock.lockPrintStartPreview.Lock()
	mock.calls.PrintStartPreview = append(mock.calls.PrintStartPreview, callInfo)
	mock.lockPrintStartPreview.Unlock()
	if mock.PrintStartPreviewFunc == nil {
		return
	}
	mock.PrintStartPreviewFunc()
}

// PrintStartPreviewCalls gets all the calls that were made to PrintStartPreview.
// Check the length with:
//
//	len(mockedPromptProvider.PrintStartPreviewCalls())
func (mock *PromptProviderMock) PrintStartPreviewCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPrintStartPreview.RLock()
	calls = mock.calls.PrintStartPreview
	mock.lockPrintStartPreview.RUnlock()
	return calls
}

// PrintUpdatingTargetRelease calls PrintUpdatingTargetReleaseFunc.
func (mock *PromptProviderMock) PrintUpdatingTargetRelease(targetEnvName string, releaseName string, releaseFilePath string, isCreating bool) {
	callInfo := struct {
		TargetEnvName   string
		ReleaseName     string
		ReleaseFilePath string
		IsCreating      bool
	}{
		TargetEnvName:   targetEnvName,
		ReleaseName:     releaseName,
		ReleaseFilePath: releaseFilePath,
		IsCreating:      isCreating,
	}
	mock.lockPrintUpdatingTargetRelease.Lock()
	mock.calls.PrintUpdatingTargetRelease = append(mock.calls.PrintUpdatingTargetRelease, callInfo)
	mock.lockPrintUpdatingTargetRelease.Unlock()
	if mock.PrintUpdatingTargetReleaseFunc == nil {
		return
	}
	mock.PrintUpdatingTargetReleaseFunc(targetEnvName, releaseName, releaseFilePath, isCreating)
}

// PrintUpdatingTargetReleaseCalls gets all the calls that were made to PrintUpdatingTargetRelease.
// Check the length with:
//
//	len(mockedPromptProvider.PrintUpdatingTargetReleaseCalls())
func (mock *PromptProviderMock) PrintUpdatingTargetReleaseCalls() []struct {
	TargetEnvName   string
	ReleaseName     string
	ReleaseFilePath string
	IsCreating      bool
} {
	var calls []struct {
		TargetEnvName   string
		ReleaseName     string
		ReleaseFilePath string
		IsCreating      bool
	}
	mock.lockPrintUpdatingTargetRelease.RLock()
	calls = mock.calls.PrintUpdatingTargetRelease
	mock.lockPrintUpdatingTargetRelease.RUnlock()
	return calls
}

// SelectPromotionAction calls SelectPromotionActionFunc.
func (mock *PromptProviderMock) SelectPromotionAction() (string, error) {
	callInfo := struct {
	}{}
	mock.lockSelectPromotionAction.Lock()
	mock.calls.SelectPromotionAction = append(mock.calls.SelectPromotionAction, callInfo)
	mock.lockSelectPromotionAction.Unlock()
	if mock.SelectPromotionActionFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.SelectPromotionActionFunc()
}

// SelectPromotionActionCalls gets all the calls that were made to SelectPromotionAction.
// Check the length with:
//
//	len(mockedPromptProvider.SelectPromotionActionCalls())
func (mock *PromptProviderMock) SelectPromotionActionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSelectPromotionAction.RLock()
	calls = mock.calls.SelectPromotionAction
	mock.lockSelectPromotionAction.RUnlock()
	return calls
}

// SelectReleases calls SelectReleasesFunc.
func (mock *PromptProviderMock) SelectReleases(list cross.ReleaseList, maxColumnWidth int) (cross.ReleaseList, error) {
	callInfo := struct {
		List           cross.ReleaseList
		MaxColumnWidth int
	}{
		List:           list,
		MaxColumnWidth: maxColumnWidth,
	}
	mock.lockSelectReleases.Lock()
	mock.calls.SelectReleases = append(mock.calls.SelectReleases, callInfo)
	mock.lockSelectReleases.Unlock()
	if mock.SelectReleasesFunc == nil {
		var (
			releaseListOut cross.ReleaseList
			errOut         error
		)
		return releaseListOut, errOut
	}
	return mock.SelectReleasesFunc(list, maxColumnWidth)
}

// SelectReleasesCalls gets all the calls that were made to SelectReleases.
// Check the length with:
//
//	len(mockedPromptProvider.SelectReleasesCalls())
func (mock *PromptProviderMock) SelectReleasesCalls() []struct {
	List           cross.ReleaseList
	MaxColumnWidth int
} {
	var calls []struct {
		List           cross.ReleaseList
		MaxColumnWidth int
	}
	mock.lockSelectReleases.RLock()
	calls = mock.calls.SelectReleases
	mock.lockSelectReleases.RUnlock()
	return calls
}

// SelectSourceEnvironment calls SelectSourceEnvironmentFunc.
func (mock *PromptProviderMock) SelectSourceEnvironment(environments []*v1alpha1.Environment) (*v1alpha1.Environment, error) {
	callInfo := struct {
		Environments []*v1alpha1.Environment
	}{
		Environments: environments,
	}
	mock.lockSelectSourceEnvironment.Lock()
	mock.calls.SelectSourceEnvironment = append(mock.calls.SelectSourceEnvironment, callInfo)
	mock.lockSelectSourceEnvironment.Unlock()
	if mock.SelectSourceEnvironmentFunc == nil {
		var (
			environmentOut *v1alpha1.Environment
			errOut         error
		)
		return environmentOut, errOut
	}
	return mock.SelectSourceEnvironmentFunc(environments)
}

// SelectSourceEnvironmentCalls gets all the calls that were made to SelectSourceEnvironment.
// Check the length with:
//
//	len(mockedPromptProvider.SelectSourceEnvironmentCalls())
func (mock *PromptProviderMock) SelectSourceEnvironmentCalls() []struct {
	Environments []*v1alpha1.Environment
} {
	var calls []struct {
		Environments []*v1alpha1.Environment
	}
	mock.lockSelectSourceEnvironment.RLock()
	calls = mock.calls.SelectSourceEnvironment
	mock.lockSelectSourceEnvironment.RUnlock()
	return calls
}

// SelectTargetEnvironment calls SelectTargetEnvironmentFunc.
func (mock *PromptProviderMock) SelectTargetEnvironment(environments []*v1alpha1.Environment) (*v1alpha1.Environment, error) {
	callInfo := struct {
		Environments []*v1alpha1.Environment
	}{
		Environments: environments,
	}
	mock.lockSelectTargetEnvironment.Lock()
	mock.calls.SelectTargetEnvironment = append(mock.calls.SelectTargetEnvironment, callInfo)
	mock.lockSelectTargetEnvironment.Unlock()
	if mock.SelectTargetEnvironmentFunc == nil {
		var (
			environmentOut *v1alpha1.Environment
			errOut         error
		)
		return environmentOut, errOut
	}
	return mock.SelectTargetEnvironmentFunc(environments)
}

// SelectTargetEnvironmentCalls gets all the calls that were made to SelectTargetEnvironment.
// Check the length with:
//
//	len(mockedPromptProvider.SelectTargetEnvironmentCalls())
func (mock *PromptProviderMock) SelectTargetEnvironmentCalls() []struct {
	Environments []*v1alpha1.Environment
} {
	var calls []struct {
		Environments []*v1alpha1.Environment
	}
	mock.lockSelectTargetEnvironment.RLock()
	calls = mock.calls.SelectTargetEnvironment
	mock.lockSelectTargetEnvironment.RUnlock()
	return calls
}
