// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package promote

import (
	"sync"
)

// Ensure, that GitProviderMock does implement GitProvider.
// If this is not the case, regenerate this file with moq.
var _ GitProvider = &GitProviderMock{}

// GitProviderMock is a mock implementation of GitProvider.
//
//	func TestSomethingThatUsesGitProvider(t *testing.T) {
//
//		// make and configure a mocked GitProvider
//		mockedGitProvider := &GitProviderMock{
//			CheckoutMasterBranchFunc: func() error {
//				panic("mock out the CheckoutMasterBranch method")
//			},
//			CreateAndPushBranchWithFilesFunc: func(branchName string, files []string, message string) error {
//				panic("mock out the CreateAndPushBranchWithFiles method")
//			},
//		}
//
//		// use mockedGitProvider in code that requires GitProvider
//		// and then make assertions.
//
//	}
type GitProviderMock struct {
	// CheckoutMasterBranchFunc mocks the CheckoutMasterBranch method.
	CheckoutMasterBranchFunc func() error

	// CreateAndPushBranchWithFilesFunc mocks the CreateAndPushBranchWithFiles method.
	CreateAndPushBranchWithFilesFunc func(branchName string, files []string, message string) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckoutMasterBranch holds details about calls to the CheckoutMasterBranch method.
		CheckoutMasterBranch []struct {
		}
		// CreateAndPushBranchWithFiles holds details about calls to the CreateAndPushBranchWithFiles method.
		CreateAndPushBranchWithFiles []struct {
			// BranchName is the branchName argument value.
			BranchName string
			// Files is the files argument value.
			Files []string
			// Message is the message argument value.
			Message string
		}
	}
	lockCheckoutMasterBranch         sync.RWMutex
	lockCreateAndPushBranchWithFiles sync.RWMutex
}

// CheckoutMasterBranch calls CheckoutMasterBranchFunc.
func (mock *GitProviderMock) CheckoutMasterBranch() error {
	callInfo := struct {
	}{}
	mock.lockCheckoutMasterBranch.Lock()
	mock.calls.CheckoutMasterBranch = append(mock.calls.CheckoutMasterBranch, callInfo)
	mock.lockCheckoutMasterBranch.Unlock()
	if mock.CheckoutMasterBranchFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CheckoutMasterBranchFunc()
}

// CheckoutMasterBranchCalls gets all the calls that were made to CheckoutMasterBranch.
// Check the length with:
//
//	len(mockedGitProvider.CheckoutMasterBranchCalls())
func (mock *GitProviderMock) CheckoutMasterBranchCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCheckoutMasterBranch.RLock()
	calls = mock.calls.CheckoutMasterBranch
	mock.lockCheckoutMasterBranch.RUnlock()
	return calls
}

// CreateAndPushBranchWithFiles calls CreateAndPushBranchWithFilesFunc.
func (mock *GitProviderMock) CreateAndPushBranchWithFiles(branchName string, files []string, message string) error {
	callInfo := struct {
		BranchName string
		Files      []string
		Message    string
	}{
		BranchName: branchName,
		Files:      files,
		Message:    message,
	}
	mock.lockCreateAndPushBranchWithFiles.Lock()
	mock.calls.CreateAndPushBranchWithFiles = append(mock.calls.CreateAndPushBranchWithFiles, callInfo)
	mock.lockCreateAndPushBranchWithFiles.Unlock()
	if mock.CreateAndPushBranchWithFilesFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateAndPushBranchWithFilesFunc(branchName, files, message)
}

// CreateAndPushBranchWithFilesCalls gets all the calls that were made to CreateAndPushBranchWithFiles.
// Check the length with:
//
//	len(mockedGitProvider.CreateAndPushBranchWithFilesCalls())
func (mock *GitProviderMock) CreateAndPushBranchWithFilesCalls() []struct {
	BranchName string
	Files      []string
	Message    string
} {
	var calls []struct {
		BranchName string
		Files      []string
		Message    string
	}
	mock.lockCreateAndPushBranchWithFiles.RLock()
	calls = mock.calls.CreateAndPushBranchWithFiles
	mock.lockCreateAndPushBranchWithFiles.RUnlock()
	return calls
}
