// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package info

import (
	"sync"

	v1alpha1 "github.com/nestoca/joy/api/v1alpha1"
)

// Ensure, that ProviderMock does implement Provider.
// If this is not the case, regenerate this file with moq.
var _ Provider = &ProviderMock{}

// ProviderMock is a mock implementation of Provider.
//
//	func TestSomethingThatUsesProvider(t *testing.T) {
//
//		// make and configure a mocked Provider
//		mockedProvider := &ProviderMock{
//			GetCodeOwnersFunc: func(projectDir string) ([]string, error) {
//				panic("mock out the GetCodeOwners method")
//			},
//			GetCommitsGitHubAuthorsFunc: func(project *v1alpha1.Project, fromTag string, toTag string) (map[string]string, error) {
//				panic("mock out the GetCommitsGitHubAuthors method")
//			},
//			GetCommitsMetadataFunc: func(projectDir string, fromTag string, toTag string) ([]*CommitMetadata, error) {
//				panic("mock out the GetCommitsMetadata method")
//			},
//			GetProjectRepositoryFunc: func(project *v1alpha1.Project) string {
//				panic("mock out the GetProjectRepository method")
//			},
//			GetProjectSourceDirFunc: func(project *v1alpha1.Project) (string, error) {
//				panic("mock out the GetProjectSourceDir method")
//			},
//			GetReleaseGitTagFunc: func(release *v1alpha1.Release) (string, error) {
//				panic("mock out the GetReleaseGitTag method")
//			},
//		}
//
//		// use mockedProvider in code that requires Provider
//		// and then make assertions.
//
//	}
type ProviderMock struct {
	// GetCodeOwnersFunc mocks the GetCodeOwners method.
	GetCodeOwnersFunc func(projectDir string) ([]string, error)

	// GetCommitsGitHubAuthorsFunc mocks the GetCommitsGitHubAuthors method.
	GetCommitsGitHubAuthorsFunc func(project *v1alpha1.Project, fromTag string, toTag string) (map[string]string, error)

	// GetCommitsMetadataFunc mocks the GetCommitsMetadata method.
	GetCommitsMetadataFunc func(projectDir string, fromTag string, toTag string) ([]*CommitMetadata, error)

	// GetProjectRepositoryFunc mocks the GetProjectRepository method.
	GetProjectRepositoryFunc func(project *v1alpha1.Project) string

	// GetProjectSourceDirFunc mocks the GetProjectSourceDir method.
	GetProjectSourceDirFunc func(project *v1alpha1.Project) (string, error)

	// GetReleaseGitTagFunc mocks the GetReleaseGitTag method.
	GetReleaseGitTagFunc func(release *v1alpha1.Release) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCodeOwners holds details about calls to the GetCodeOwners method.
		GetCodeOwners []struct {
			// ProjectDir is the projectDir argument value.
			ProjectDir string
		}
		// GetCommitsGitHubAuthors holds details about calls to the GetCommitsGitHubAuthors method.
		GetCommitsGitHubAuthors []struct {
			// Project is the project argument value.
			Project *v1alpha1.Project
			// FromTag is the fromTag argument value.
			FromTag string
			// ToTag is the toTag argument value.
			ToTag string
		}
		// GetCommitsMetadata holds details about calls to the GetCommitsMetadata method.
		GetCommitsMetadata []struct {
			// ProjectDir is the projectDir argument value.
			ProjectDir string
			// FromTag is the fromTag argument value.
			FromTag string
			// ToTag is the toTag argument value.
			ToTag string
		}
		// GetProjectRepository holds details about calls to the GetProjectRepository method.
		GetProjectRepository []struct {
			// Project is the project argument value.
			Project *v1alpha1.Project
		}
		// GetProjectSourceDir holds details about calls to the GetProjectSourceDir method.
		GetProjectSourceDir []struct {
			// Project is the project argument value.
			Project *v1alpha1.Project
		}
		// GetReleaseGitTag holds details about calls to the GetReleaseGitTag method.
		GetReleaseGitTag []struct {
			// Release is the release argument value.
			Release *v1alpha1.Release
		}
	}
	lockGetCodeOwners           sync.RWMutex
	lockGetCommitsGitHubAuthors sync.RWMutex
	lockGetCommitsMetadata      sync.RWMutex
	lockGetProjectRepository    sync.RWMutex
	lockGetProjectSourceDir     sync.RWMutex
	lockGetReleaseGitTag        sync.RWMutex
}

// GetCodeOwners calls GetCodeOwnersFunc.
func (mock *ProviderMock) GetCodeOwners(projectDir string) ([]string, error) {
	if mock.GetCodeOwnersFunc == nil {
		panic("ProviderMock.GetCodeOwnersFunc: method is nil but Provider.GetCodeOwners was just called")
	}
	callInfo := struct {
		ProjectDir string
	}{
		ProjectDir: projectDir,
	}
	mock.lockGetCodeOwners.Lock()
	mock.calls.GetCodeOwners = append(mock.calls.GetCodeOwners, callInfo)
	mock.lockGetCodeOwners.Unlock()
	return mock.GetCodeOwnersFunc(projectDir)
}

// GetCodeOwnersCalls gets all the calls that were made to GetCodeOwners.
// Check the length with:
//
//	len(mockedProvider.GetCodeOwnersCalls())
func (mock *ProviderMock) GetCodeOwnersCalls() []struct {
	ProjectDir string
} {
	var calls []struct {
		ProjectDir string
	}
	mock.lockGetCodeOwners.RLock()
	calls = mock.calls.GetCodeOwners
	mock.lockGetCodeOwners.RUnlock()
	return calls
}

// GetCommitsGitHubAuthors calls GetCommitsGitHubAuthorsFunc.
func (mock *ProviderMock) GetCommitsGitHubAuthors(project *v1alpha1.Project, fromTag string, toTag string) (map[string]string, error) {
	if mock.GetCommitsGitHubAuthorsFunc == nil {
		panic("ProviderMock.GetCommitsGitHubAuthorsFunc: method is nil but Provider.GetCommitsGitHubAuthors was just called")
	}
	callInfo := struct {
		Project *v1alpha1.Project
		FromTag string
		ToTag   string
	}{
		Project: project,
		FromTag: fromTag,
		ToTag:   toTag,
	}
	mock.lockGetCommitsGitHubAuthors.Lock()
	mock.calls.GetCommitsGitHubAuthors = append(mock.calls.GetCommitsGitHubAuthors, callInfo)
	mock.lockGetCommitsGitHubAuthors.Unlock()
	return mock.GetCommitsGitHubAuthorsFunc(project, fromTag, toTag)
}

// GetCommitsGitHubAuthorsCalls gets all the calls that were made to GetCommitsGitHubAuthors.
// Check the length with:
//
//	len(mockedProvider.GetCommitsGitHubAuthorsCalls())
func (mock *ProviderMock) GetCommitsGitHubAuthorsCalls() []struct {
	Project *v1alpha1.Project
	FromTag string
	ToTag   string
} {
	var calls []struct {
		Project *v1alpha1.Project
		FromTag string
		ToTag   string
	}
	mock.lockGetCommitsGitHubAuthors.RLock()
	calls = mock.calls.GetCommitsGitHubAuthors
	mock.lockGetCommitsGitHubAuthors.RUnlock()
	return calls
}

// GetCommitsMetadata calls GetCommitsMetadataFunc.
func (mock *ProviderMock) GetCommitsMetadata(projectDir string, fromTag string, toTag string) ([]*CommitMetadata, error) {
	if mock.GetCommitsMetadataFunc == nil {
		panic("ProviderMock.GetCommitsMetadataFunc: method is nil but Provider.GetCommitsMetadata was just called")
	}
	callInfo := struct {
		ProjectDir string
		FromTag    string
		ToTag      string
	}{
		ProjectDir: projectDir,
		FromTag:    fromTag,
		ToTag:      toTag,
	}
	mock.lockGetCommitsMetadata.Lock()
	mock.calls.GetCommitsMetadata = append(mock.calls.GetCommitsMetadata, callInfo)
	mock.lockGetCommitsMetadata.Unlock()
	return mock.GetCommitsMetadataFunc(projectDir, fromTag, toTag)
}

// GetCommitsMetadataCalls gets all the calls that were made to GetCommitsMetadata.
// Check the length with:
//
//	len(mockedProvider.GetCommitsMetadataCalls())
func (mock *ProviderMock) GetCommitsMetadataCalls() []struct {
	ProjectDir string
	FromTag    string
	ToTag      string
} {
	var calls []struct {
		ProjectDir string
		FromTag    string
		ToTag      string
	}
	mock.lockGetCommitsMetadata.RLock()
	calls = mock.calls.GetCommitsMetadata
	mock.lockGetCommitsMetadata.RUnlock()
	return calls
}

// GetProjectRepository calls GetProjectRepositoryFunc.
func (mock *ProviderMock) GetProjectRepository(project *v1alpha1.Project) string {
	if mock.GetProjectRepositoryFunc == nil {
		panic("ProviderMock.GetProjectRepositoryFunc: method is nil but Provider.GetProjectRepository was just called")
	}
	callInfo := struct {
		Project *v1alpha1.Project
	}{
		Project: project,
	}
	mock.lockGetProjectRepository.Lock()
	mock.calls.GetProjectRepository = append(mock.calls.GetProjectRepository, callInfo)
	mock.lockGetProjectRepository.Unlock()
	return mock.GetProjectRepositoryFunc(project)
}

// GetProjectRepositoryCalls gets all the calls that were made to GetProjectRepository.
// Check the length with:
//
//	len(mockedProvider.GetProjectRepositoryCalls())
func (mock *ProviderMock) GetProjectRepositoryCalls() []struct {
	Project *v1alpha1.Project
} {
	var calls []struct {
		Project *v1alpha1.Project
	}
	mock.lockGetProjectRepository.RLock()
	calls = mock.calls.GetProjectRepository
	mock.lockGetProjectRepository.RUnlock()
	return calls
}

// GetProjectSourceDir calls GetProjectSourceDirFunc.
func (mock *ProviderMock) GetProjectSourceDir(project *v1alpha1.Project) (string, error) {
	if mock.GetProjectSourceDirFunc == nil {
		panic("ProviderMock.GetProjectSourceDirFunc: method is nil but Provider.GetProjectSourceDir was just called")
	}
	callInfo := struct {
		Project *v1alpha1.Project
	}{
		Project: project,
	}
	mock.lockGetProjectSourceDir.Lock()
	mock.calls.GetProjectSourceDir = append(mock.calls.GetProjectSourceDir, callInfo)
	mock.lockGetProjectSourceDir.Unlock()
	return mock.GetProjectSourceDirFunc(project)
}

// GetProjectSourceDirCalls gets all the calls that were made to GetProjectSourceDir.
// Check the length with:
//
//	len(mockedProvider.GetProjectSourceDirCalls())
func (mock *ProviderMock) GetProjectSourceDirCalls() []struct {
	Project *v1alpha1.Project
} {
	var calls []struct {
		Project *v1alpha1.Project
	}
	mock.lockGetProjectSourceDir.RLock()
	calls = mock.calls.GetProjectSourceDir
	mock.lockGetProjectSourceDir.RUnlock()
	return calls
}

// GetReleaseGitTag calls GetReleaseGitTagFunc.
func (mock *ProviderMock) GetReleaseGitTag(release *v1alpha1.Release) (string, error) {
	if mock.GetReleaseGitTagFunc == nil {
		panic("ProviderMock.GetReleaseGitTagFunc: method is nil but Provider.GetReleaseGitTag was just called")
	}
	callInfo := struct {
		Release *v1alpha1.Release
	}{
		Release: release,
	}
	mock.lockGetReleaseGitTag.Lock()
	mock.calls.GetReleaseGitTag = append(mock.calls.GetReleaseGitTag, callInfo)
	mock.lockGetReleaseGitTag.Unlock()
	return mock.GetReleaseGitTagFunc(release)
}

// GetReleaseGitTagCalls gets all the calls that were made to GetReleaseGitTag.
// Check the length with:
//
//	len(mockedProvider.GetReleaseGitTagCalls())
func (mock *ProviderMock) GetReleaseGitTagCalls() []struct {
	Release *v1alpha1.Release
} {
	var calls []struct {
		Release *v1alpha1.Release
	}
	mock.lockGetReleaseGitTag.RLock()
	calls = mock.calls.GetReleaseGitTag
	mock.lockGetReleaseGitTag.RUnlock()
	return calls
}
