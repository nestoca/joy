// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package links

import (
	"sync"

	v1alpha1 "github.com/nestoca/joy/api/v1alpha1"
)

// Ensure, that ProviderMock does implement Provider.
// If this is not the case, regenerate this file with moq.
var _ Provider = &ProviderMock{}

// ProviderMock is a mock implementation of Provider.
//
//	func TestSomethingThatUsesProvider(t *testing.T) {
//
//		// make and configure a mocked Provider
//		mockedProvider := &ProviderMock{
//			GetEnvironmentLinksFunc: func(environment *v1alpha1.Environment) (map[string]string, error) {
//				panic("mock out the GetEnvironmentLinks method")
//			},
//			GetProjectLinksFunc: func(project *v1alpha1.Project) (map[string]string, error) {
//				panic("mock out the GetProjectLinks method")
//			},
//			GetReleaseLinksFunc: func(release *v1alpha1.Release) (map[string]string, error) {
//				panic("mock out the GetReleaseLinks method")
//			},
//		}
//
//		// use mockedProvider in code that requires Provider
//		// and then make assertions.
//
//	}
type ProviderMock struct {
	// GetEnvironmentLinksFunc mocks the GetEnvironmentLinks method.
	GetEnvironmentLinksFunc func(environment *v1alpha1.Environment) (map[string]string, error)

	// GetProjectLinksFunc mocks the GetProjectLinks method.
	GetProjectLinksFunc func(project *v1alpha1.Project) (map[string]string, error)

	// GetReleaseLinksFunc mocks the GetReleaseLinks method.
	GetReleaseLinksFunc func(release *v1alpha1.Release) (map[string]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetEnvironmentLinks holds details about calls to the GetEnvironmentLinks method.
		GetEnvironmentLinks []struct {
			// Environment is the environment argument value.
			Environment *v1alpha1.Environment
		}
		// GetProjectLinks holds details about calls to the GetProjectLinks method.
		GetProjectLinks []struct {
			// Project is the project argument value.
			Project *v1alpha1.Project
		}
		// GetReleaseLinks holds details about calls to the GetReleaseLinks method.
		GetReleaseLinks []struct {
			// Release is the release argument value.
			Release *v1alpha1.Release
		}
	}
	lockGetEnvironmentLinks sync.RWMutex
	lockGetProjectLinks     sync.RWMutex
	lockGetReleaseLinks     sync.RWMutex
}

// GetEnvironmentLinks calls GetEnvironmentLinksFunc.
func (mock *ProviderMock) GetEnvironmentLinks(environment *v1alpha1.Environment) (map[string]string, error) {
	callInfo := struct {
		Environment *v1alpha1.Environment
	}{
		Environment: environment,
	}
	mock.lockGetEnvironmentLinks.Lock()
	mock.calls.GetEnvironmentLinks = append(mock.calls.GetEnvironmentLinks, callInfo)
	mock.lockGetEnvironmentLinks.Unlock()
	if mock.GetEnvironmentLinksFunc == nil {
		var (
			stringToStringOut map[string]string
			errOut            error
		)
		return stringToStringOut, errOut
	}
	return mock.GetEnvironmentLinksFunc(environment)
}

// GetEnvironmentLinksCalls gets all the calls that were made to GetEnvironmentLinks.
// Check the length with:
//
//	len(mockedProvider.GetEnvironmentLinksCalls())
func (mock *ProviderMock) GetEnvironmentLinksCalls() []struct {
	Environment *v1alpha1.Environment
} {
	var calls []struct {
		Environment *v1alpha1.Environment
	}
	mock.lockGetEnvironmentLinks.RLock()
	calls = mock.calls.GetEnvironmentLinks
	mock.lockGetEnvironmentLinks.RUnlock()
	return calls
}

// GetProjectLinks calls GetProjectLinksFunc.
func (mock *ProviderMock) GetProjectLinks(project *v1alpha1.Project) (map[string]string, error) {
	callInfo := struct {
		Project *v1alpha1.Project
	}{
		Project: project,
	}
	mock.lockGetProjectLinks.Lock()
	mock.calls.GetProjectLinks = append(mock.calls.GetProjectLinks, callInfo)
	mock.lockGetProjectLinks.Unlock()
	if mock.GetProjectLinksFunc == nil {
		var (
			stringToStringOut map[string]string
			errOut            error
		)
		return stringToStringOut, errOut
	}
	return mock.GetProjectLinksFunc(project)
}

// GetProjectLinksCalls gets all the calls that were made to GetProjectLinks.
// Check the length with:
//
//	len(mockedProvider.GetProjectLinksCalls())
func (mock *ProviderMock) GetProjectLinksCalls() []struct {
	Project *v1alpha1.Project
} {
	var calls []struct {
		Project *v1alpha1.Project
	}
	mock.lockGetProjectLinks.RLock()
	calls = mock.calls.GetProjectLinks
	mock.lockGetProjectLinks.RUnlock()
	return calls
}

// GetReleaseLinks calls GetReleaseLinksFunc.
func (mock *ProviderMock) GetReleaseLinks(release *v1alpha1.Release) (map[string]string, error) {
	callInfo := struct {
		Release *v1alpha1.Release
	}{
		Release: release,
	}
	mock.lockGetReleaseLinks.Lock()
	mock.calls.GetReleaseLinks = append(mock.calls.GetReleaseLinks, callInfo)
	mock.lockGetReleaseLinks.Unlock()
	if mock.GetReleaseLinksFunc == nil {
		var (
			stringToStringOut map[string]string
			errOut            error
		)
		return stringToStringOut, errOut
	}
	return mock.GetReleaseLinksFunc(release)
}

// GetReleaseLinksCalls gets all the calls that were made to GetReleaseLinks.
// Check the length with:
//
//	len(mockedProvider.GetReleaseLinksCalls())
func (mock *ProviderMock) GetReleaseLinksCalls() []struct {
	Release *v1alpha1.Release
} {
	var calls []struct {
		Release *v1alpha1.Release
	}
	mock.lockGetReleaseLinks.RLock()
	calls = mock.calls.GetReleaseLinks
	mock.lockGetReleaseLinks.RUnlock()
	return calls
}
