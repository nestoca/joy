// Code generated by MockGen. DO NOT EDIT.
// Source: pull_request_provider.go

// Package promote is a generated GoMock package.
package promote

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPullRequestProvider is a mock of PullRequestProvider interface.
type MockPullRequestProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestProviderMockRecorder
}

// MockPullRequestProviderMockRecorder is the mock recorder for MockPullRequestProvider.
type MockPullRequestProviderMockRecorder struct {
	mock *MockPullRequestProvider
}

// NewMockPullRequestProvider creates a new mock instance.
func NewMockPullRequestProvider(ctrl *gomock.Controller) *MockPullRequestProvider {
	mock := &MockPullRequestProvider{ctrl: ctrl}
	mock.recorder = &MockPullRequestProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestProvider) EXPECT() *MockPullRequestProviderMockRecorder {
	return m.recorder
}

// CreateInteractively mocks base method.
func (m *MockPullRequestProvider) CreateInteractively(branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInteractively", branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInteractively indicates an expected call of CreateInteractively.
func (mr *MockPullRequestProviderMockRecorder) CreateInteractively(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInteractively", reflect.TypeOf((*MockPullRequestProvider)(nil).CreateInteractively), branch)
}

// Exists mocks base method.
func (m *MockPullRequestProvider) Exists(branch string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", branch)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockPullRequestProviderMockRecorder) Exists(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPullRequestProvider)(nil).Exists), branch)
}

// GetPromotionEnvironment mocks base method.
func (m *MockPullRequestProvider) GetPromotionEnvironment(branch string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotionEnvironment", branch)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotionEnvironment indicates an expected call of GetPromotionEnvironment.
func (mr *MockPullRequestProviderMockRecorder) GetPromotionEnvironment(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotionEnvironment", reflect.TypeOf((*MockPullRequestProvider)(nil).GetPromotionEnvironment), branch)
}

// SetPromotionEnvironment mocks base method.
func (m *MockPullRequestProvider) SetPromotionEnvironment(branch, env string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPromotionEnvironment", branch, env)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPromotionEnvironment indicates an expected call of SetPromotionEnvironment.
func (mr *MockPullRequestProviderMockRecorder) SetPromotionEnvironment(branch, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPromotionEnvironment", reflect.TypeOf((*MockPullRequestProvider)(nil).SetPromotionEnvironment), branch, env)
}
