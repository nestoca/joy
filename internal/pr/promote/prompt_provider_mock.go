// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package promote

import (
	"sync"
)

// Ensure, that PromptProviderMock does implement PromptProvider.
// If this is not the case, regenerate this file with moq.
var _ PromptProvider = &PromptProviderMock{}

// PromptProviderMock is a mock implementation of PromptProvider.
//
//	func TestSomethingThatUsesPromptProvider(t *testing.T) {
//
//		// make and configure a mocked PromptProvider
//		mockedPromptProvider := &PromptProviderMock{
//			ConfirmDisablingPromotionOnOtherPullRequestFunc: func(branch string, env string) (bool, error) {
//				panic("mock out the ConfirmDisablingPromotionOnOtherPullRequest method")
//			},
//			PrintBranchDoesNotSupportAutoPromotionFunc: func(branch string)  {
//				panic("mock out the PrintBranchDoesNotSupportAutoPromotion method")
//			},
//			PrintNotCreatingPullRequestFunc: func()  {
//				panic("mock out the PrintNotCreatingPullRequest method")
//			},
//			PrintPromotionAlreadyConfiguredFunc: func(branch string, env string)  {
//				panic("mock out the PrintPromotionAlreadyConfigured method")
//			},
//			PrintPromotionConfiguredFunc: func(branch string, env string)  {
//				panic("mock out the PrintPromotionConfigured method")
//			},
//			PrintPromotionDisabledFunc: func(branch string)  {
//				panic("mock out the PrintPromotionDisabled method")
//			},
//			PrintPromotionNotConfiguredFunc: func(branch string, env string)  {
//				panic("mock out the PrintPromotionNotConfigured method")
//			},
//			WhetherToCreateMissingPullRequestFunc: func() (bool, error) {
//				panic("mock out the WhetherToCreateMissingPullRequest method")
//			},
//			WhichEnvironmentToPromoteToFunc: func(environments []string, preSelectedEnv string) (string, error) {
//				panic("mock out the WhichEnvironmentToPromoteTo method")
//			},
//		}
//
//		// use mockedPromptProvider in code that requires PromptProvider
//		// and then make assertions.
//
//	}
type PromptProviderMock struct {
	// ConfirmDisablingPromotionOnOtherPullRequestFunc mocks the ConfirmDisablingPromotionOnOtherPullRequest method.
	ConfirmDisablingPromotionOnOtherPullRequestFunc func(branch string, env string) (bool, error)

	// PrintBranchDoesNotSupportAutoPromotionFunc mocks the PrintBranchDoesNotSupportAutoPromotion method.
	PrintBranchDoesNotSupportAutoPromotionFunc func(branch string)

	// PrintNotCreatingPullRequestFunc mocks the PrintNotCreatingPullRequest method.
	PrintNotCreatingPullRequestFunc func()

	// PrintPromotionAlreadyConfiguredFunc mocks the PrintPromotionAlreadyConfigured method.
	PrintPromotionAlreadyConfiguredFunc func(branch string, env string)

	// PrintPromotionConfiguredFunc mocks the PrintPromotionConfigured method.
	PrintPromotionConfiguredFunc func(branch string, env string)

	// PrintPromotionDisabledFunc mocks the PrintPromotionDisabled method.
	PrintPromotionDisabledFunc func(branch string)

	// PrintPromotionNotConfiguredFunc mocks the PrintPromotionNotConfigured method.
	PrintPromotionNotConfiguredFunc func(branch string, env string)

	// WhetherToCreateMissingPullRequestFunc mocks the WhetherToCreateMissingPullRequest method.
	WhetherToCreateMissingPullRequestFunc func() (bool, error)

	// WhichEnvironmentToPromoteToFunc mocks the WhichEnvironmentToPromoteTo method.
	WhichEnvironmentToPromoteToFunc func(environments []string, preSelectedEnv string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ConfirmDisablingPromotionOnOtherPullRequest holds details about calls to the ConfirmDisablingPromotionOnOtherPullRequest method.
		ConfirmDisablingPromotionOnOtherPullRequest []struct {
			// Branch is the branch argument value.
			Branch string
			// Env is the env argument value.
			Env string
		}
		// PrintBranchDoesNotSupportAutoPromotion holds details about calls to the PrintBranchDoesNotSupportAutoPromotion method.
		PrintBranchDoesNotSupportAutoPromotion []struct {
			// Branch is the branch argument value.
			Branch string
		}
		// PrintNotCreatingPullRequest holds details about calls to the PrintNotCreatingPullRequest method.
		PrintNotCreatingPullRequest []struct {
		}
		// PrintPromotionAlreadyConfigured holds details about calls to the PrintPromotionAlreadyConfigured method.
		PrintPromotionAlreadyConfigured []struct {
			// Branch is the branch argument value.
			Branch string
			// Env is the env argument value.
			Env string
		}
		// PrintPromotionConfigured holds details about calls to the PrintPromotionConfigured method.
		PrintPromotionConfigured []struct {
			// Branch is the branch argument value.
			Branch string
			// Env is the env argument value.
			Env string
		}
		// PrintPromotionDisabled holds details about calls to the PrintPromotionDisabled method.
		PrintPromotionDisabled []struct {
			// Branch is the branch argument value.
			Branch string
		}
		// PrintPromotionNotConfigured holds details about calls to the PrintPromotionNotConfigured method.
		PrintPromotionNotConfigured []struct {
			// Branch is the branch argument value.
			Branch string
			// Env is the env argument value.
			Env string
		}
		// WhetherToCreateMissingPullRequest holds details about calls to the WhetherToCreateMissingPullRequest method.
		WhetherToCreateMissingPullRequest []struct {
		}
		// WhichEnvironmentToPromoteTo holds details about calls to the WhichEnvironmentToPromoteTo method.
		WhichEnvironmentToPromoteTo []struct {
			// Environments is the environments argument value.
			Environments []string
			// PreSelectedEnv is the preSelectedEnv argument value.
			PreSelectedEnv string
		}
	}
	lockConfirmDisablingPromotionOnOtherPullRequest sync.RWMutex
	lockPrintBranchDoesNotSupportAutoPromotion      sync.RWMutex
	lockPrintNotCreatingPullRequest                 sync.RWMutex
	lockPrintPromotionAlreadyConfigured             sync.RWMutex
	lockPrintPromotionConfigured                    sync.RWMutex
	lockPrintPromotionDisabled                      sync.RWMutex
	lockPrintPromotionNotConfigured                 sync.RWMutex
	lockWhetherToCreateMissingPullRequest           sync.RWMutex
	lockWhichEnvironmentToPromoteTo                 sync.RWMutex
}

// ConfirmDisablingPromotionOnOtherPullRequest calls ConfirmDisablingPromotionOnOtherPullRequestFunc.
func (mock *PromptProviderMock) ConfirmDisablingPromotionOnOtherPullRequest(branch string, env string) (bool, error) {
	callInfo := struct {
		Branch string
		Env    string
	}{
		Branch: branch,
		Env:    env,
	}
	mock.lockConfirmDisablingPromotionOnOtherPullRequest.Lock()
	mock.calls.ConfirmDisablingPromotionOnOtherPullRequest = append(mock.calls.ConfirmDisablingPromotionOnOtherPullRequest, callInfo)
	mock.lockConfirmDisablingPromotionOnOtherPullRequest.Unlock()
	if mock.ConfirmDisablingPromotionOnOtherPullRequestFunc == nil {
		var (
			bOut   bool
			errOut error
		)
		return bOut, errOut
	}
	return mock.ConfirmDisablingPromotionOnOtherPullRequestFunc(branch, env)
}

// ConfirmDisablingPromotionOnOtherPullRequestCalls gets all the calls that were made to ConfirmDisablingPromotionOnOtherPullRequest.
// Check the length with:
//
//	len(mockedPromptProvider.ConfirmDisablingPromotionOnOtherPullRequestCalls())
func (mock *PromptProviderMock) ConfirmDisablingPromotionOnOtherPullRequestCalls() []struct {
	Branch string
	Env    string
} {
	var calls []struct {
		Branch string
		Env    string
	}
	mock.lockConfirmDisablingPromotionOnOtherPullRequest.RLock()
	calls = mock.calls.ConfirmDisablingPromotionOnOtherPullRequest
	mock.lockConfirmDisablingPromotionOnOtherPullRequest.RUnlock()
	return calls
}

// PrintBranchDoesNotSupportAutoPromotion calls PrintBranchDoesNotSupportAutoPromotionFunc.
func (mock *PromptProviderMock) PrintBranchDoesNotSupportAutoPromotion(branch string) {
	callInfo := struct {
		Branch string
	}{
		Branch: branch,
	}
	mock.lockPrintBranchDoesNotSupportAutoPromotion.Lock()
	mock.calls.PrintBranchDoesNotSupportAutoPromotion = append(mock.calls.PrintBranchDoesNotSupportAutoPromotion, callInfo)
	mock.lockPrintBranchDoesNotSupportAutoPromotion.Unlock()
	if mock.PrintBranchDoesNotSupportAutoPromotionFunc == nil {
		return
	}
	mock.PrintBranchDoesNotSupportAutoPromotionFunc(branch)
}

// PrintBranchDoesNotSupportAutoPromotionCalls gets all the calls that were made to PrintBranchDoesNotSupportAutoPromotion.
// Check the length with:
//
//	len(mockedPromptProvider.PrintBranchDoesNotSupportAutoPromotionCalls())
func (mock *PromptProviderMock) PrintBranchDoesNotSupportAutoPromotionCalls() []struct {
	Branch string
} {
	var calls []struct {
		Branch string
	}
	mock.lockPrintBranchDoesNotSupportAutoPromotion.RLock()
	calls = mock.calls.PrintBranchDoesNotSupportAutoPromotion
	mock.lockPrintBranchDoesNotSupportAutoPromotion.RUnlock()
	return calls
}

// PrintNotCreatingPullRequest calls PrintNotCreatingPullRequestFunc.
func (mock *PromptProviderMock) PrintNotCreatingPullRequest() {
	callInfo := struct {
	}{}
	mock.lockPrintNotCreatingPullRequest.Lock()
	mock.calls.PrintNotCreatingPullRequest = append(mock.calls.PrintNotCreatingPullRequest, callInfo)
	mock.lockPrintNotCreatingPullRequest.Unlock()
	if mock.PrintNotCreatingPullRequestFunc == nil {
		return
	}
	mock.PrintNotCreatingPullRequestFunc()
}

// PrintNotCreatingPullRequestCalls gets all the calls that were made to PrintNotCreatingPullRequest.
// Check the length with:
//
//	len(mockedPromptProvider.PrintNotCreatingPullRequestCalls())
func (mock *PromptProviderMock) PrintNotCreatingPullRequestCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPrintNotCreatingPullRequest.RLock()
	calls = mock.calls.PrintNotCreatingPullRequest
	mock.lockPrintNotCreatingPullRequest.RUnlock()
	return calls
}

// PrintPromotionAlreadyConfigured calls PrintPromotionAlreadyConfiguredFunc.
func (mock *PromptProviderMock) PrintPromotionAlreadyConfigured(branch string, env string) {
	callInfo := struct {
		Branch string
		Env    string
	}{
		Branch: branch,
		Env:    env,
	}
	mock.lockPrintPromotionAlreadyConfigured.Lock()
	mock.calls.PrintPromotionAlreadyConfigured = append(mock.calls.PrintPromotionAlreadyConfigured, callInfo)
	mock.lockPrintPromotionAlreadyConfigured.Unlock()
	if mock.PrintPromotionAlreadyConfiguredFunc == nil {
		return
	}
	mock.PrintPromotionAlreadyConfiguredFunc(branch, env)
}

// PrintPromotionAlreadyConfiguredCalls gets all the calls that were made to PrintPromotionAlreadyConfigured.
// Check the length with:
//
//	len(mockedPromptProvider.PrintPromotionAlreadyConfiguredCalls())
func (mock *PromptProviderMock) PrintPromotionAlreadyConfiguredCalls() []struct {
	Branch string
	Env    string
} {
	var calls []struct {
		Branch string
		Env    string
	}
	mock.lockPrintPromotionAlreadyConfigured.RLock()
	calls = mock.calls.PrintPromotionAlreadyConfigured
	mock.lockPrintPromotionAlreadyConfigured.RUnlock()
	return calls
}

// PrintPromotionConfigured calls PrintPromotionConfiguredFunc.
func (mock *PromptProviderMock) PrintPromotionConfigured(branch string, env string) {
	callInfo := struct {
		Branch string
		Env    string
	}{
		Branch: branch,
		Env:    env,
	}
	mock.lockPrintPromotionConfigured.Lock()
	mock.calls.PrintPromotionConfigured = append(mock.calls.PrintPromotionConfigured, callInfo)
	mock.lockPrintPromotionConfigured.Unlock()
	if mock.PrintPromotionConfiguredFunc == nil {
		return
	}
	mock.PrintPromotionConfiguredFunc(branch, env)
}

// PrintPromotionConfiguredCalls gets all the calls that were made to PrintPromotionConfigured.
// Check the length with:
//
//	len(mockedPromptProvider.PrintPromotionConfiguredCalls())
func (mock *PromptProviderMock) PrintPromotionConfiguredCalls() []struct {
	Branch string
	Env    string
} {
	var calls []struct {
		Branch string
		Env    string
	}
	mock.lockPrintPromotionConfigured.RLock()
	calls = mock.calls.PrintPromotionConfigured
	mock.lockPrintPromotionConfigured.RUnlock()
	return calls
}

// PrintPromotionDisabled calls PrintPromotionDisabledFunc.
func (mock *PromptProviderMock) PrintPromotionDisabled(branch string) {
	callInfo := struct {
		Branch string
	}{
		Branch: branch,
	}
	mock.lockPrintPromotionDisabled.Lock()
	mock.calls.PrintPromotionDisabled = append(mock.calls.PrintPromotionDisabled, callInfo)
	mock.lockPrintPromotionDisabled.Unlock()
	if mock.PrintPromotionDisabledFunc == nil {
		return
	}
	mock.PrintPromotionDisabledFunc(branch)
}

// PrintPromotionDisabledCalls gets all the calls that were made to PrintPromotionDisabled.
// Check the length with:
//
//	len(mockedPromptProvider.PrintPromotionDisabledCalls())
func (mock *PromptProviderMock) PrintPromotionDisabledCalls() []struct {
	Branch string
} {
	var calls []struct {
		Branch string
	}
	mock.lockPrintPromotionDisabled.RLock()
	calls = mock.calls.PrintPromotionDisabled
	mock.lockPrintPromotionDisabled.RUnlock()
	return calls
}

// PrintPromotionNotConfigured calls PrintPromotionNotConfiguredFunc.
func (mock *PromptProviderMock) PrintPromotionNotConfigured(branch string, env string) {
	callInfo := struct {
		Branch string
		Env    string
	}{
		Branch: branch,
		Env:    env,
	}
	mock.lockPrintPromotionNotConfigured.Lock()
	mock.calls.PrintPromotionNotConfigured = append(mock.calls.PrintPromotionNotConfigured, callInfo)
	mock.lockPrintPromotionNotConfigured.Unlock()
	if mock.PrintPromotionNotConfiguredFunc == nil {
		return
	}
	mock.PrintPromotionNotConfiguredFunc(branch, env)
}

// PrintPromotionNotConfiguredCalls gets all the calls that were made to PrintPromotionNotConfigured.
// Check the length with:
//
//	len(mockedPromptProvider.PrintPromotionNotConfiguredCalls())
func (mock *PromptProviderMock) PrintPromotionNotConfiguredCalls() []struct {
	Branch string
	Env    string
} {
	var calls []struct {
		Branch string
		Env    string
	}
	mock.lockPrintPromotionNotConfigured.RLock()
	calls = mock.calls.PrintPromotionNotConfigured
	mock.lockPrintPromotionNotConfigured.RUnlock()
	return calls
}

// WhetherToCreateMissingPullRequest calls WhetherToCreateMissingPullRequestFunc.
func (mock *PromptProviderMock) WhetherToCreateMissingPullRequest() (bool, error) {
	callInfo := struct {
	}{}
	mock.lockWhetherToCreateMissingPullRequest.Lock()
	mock.calls.WhetherToCreateMissingPullRequest = append(mock.calls.WhetherToCreateMissingPullRequest, callInfo)
	mock.lockWhetherToCreateMissingPullRequest.Unlock()
	if mock.WhetherToCreateMissingPullRequestFunc == nil {
		var (
			bOut   bool
			errOut error
		)
		return bOut, errOut
	}
	return mock.WhetherToCreateMissingPullRequestFunc()
}

// WhetherToCreateMissingPullRequestCalls gets all the calls that were made to WhetherToCreateMissingPullRequest.
// Check the length with:
//
//	len(mockedPromptProvider.WhetherToCreateMissingPullRequestCalls())
func (mock *PromptProviderMock) WhetherToCreateMissingPullRequestCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockWhetherToCreateMissingPullRequest.RLock()
	calls = mock.calls.WhetherToCreateMissingPullRequest
	mock.lockWhetherToCreateMissingPullRequest.RUnlock()
	return calls
}

// WhichEnvironmentToPromoteTo calls WhichEnvironmentToPromoteToFunc.
func (mock *PromptProviderMock) WhichEnvironmentToPromoteTo(environments []string, preSelectedEnv string) (string, error) {
	callInfo := struct {
		Environments   []string
		PreSelectedEnv string
	}{
		Environments:   environments,
		PreSelectedEnv: preSelectedEnv,
	}
	mock.lockWhichEnvironmentToPromoteTo.Lock()
	mock.calls.WhichEnvironmentToPromoteTo = append(mock.calls.WhichEnvironmentToPromoteTo, callInfo)
	mock.lockWhichEnvironmentToPromoteTo.Unlock()
	if mock.WhichEnvironmentToPromoteToFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.WhichEnvironmentToPromoteToFunc(environments, preSelectedEnv)
}

// WhichEnvironmentToPromoteToCalls gets all the calls that were made to WhichEnvironmentToPromoteTo.
// Check the length with:
//
//	len(mockedPromptProvider.WhichEnvironmentToPromoteToCalls())
func (mock *PromptProviderMock) WhichEnvironmentToPromoteToCalls() []struct {
	Environments   []string
	PreSelectedEnv string
} {
	var calls []struct {
		Environments   []string
		PreSelectedEnv string
	}
	mock.lockWhichEnvironmentToPromoteTo.RLock()
	calls = mock.calls.WhichEnvironmentToPromoteTo
	mock.lockWhichEnvironmentToPromoteTo.RUnlock()
	return calls
}
