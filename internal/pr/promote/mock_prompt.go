// Code generated by MockGen. DO NOT EDIT.
// Source: prompt.go

// Package promote is a generated GoMock package.
package promote

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrompt is a mock of Prompt interface.
type MockPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockPromptMockRecorder
}

// MockPromptMockRecorder is the mock recorder for MockPrompt.
type MockPromptMockRecorder struct {
	mock *MockPrompt
}

// NewMockPrompt creates a new mock instance.
func NewMockPrompt(ctrl *gomock.Controller) *MockPrompt {
	mock := &MockPrompt{ctrl: ctrl}
	mock.recorder = &MockPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompt) EXPECT() *MockPromptMockRecorder {
	return m.recorder
}

// PrintMasterBranchPromotion mocks base method.
func (m *MockPrompt) PrintMasterBranchPromotion() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintMasterBranchPromotion")
}

// PrintMasterBranchPromotion indicates an expected call of PrintMasterBranchPromotion.
func (mr *MockPromptMockRecorder) PrintMasterBranchPromotion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintMasterBranchPromotion", reflect.TypeOf((*MockPrompt)(nil).PrintMasterBranchPromotion))
}

// PrintNotCreatingPullRequest mocks base method.
func (m *MockPrompt) PrintNotCreatingPullRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintNotCreatingPullRequest")
}

// PrintNotCreatingPullRequest indicates an expected call of PrintNotCreatingPullRequest.
func (mr *MockPromptMockRecorder) PrintNotCreatingPullRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintNotCreatingPullRequest", reflect.TypeOf((*MockPrompt)(nil).PrintNotCreatingPullRequest))
}

// PrintPromotionConfigured mocks base method.
func (m *MockPrompt) PrintPromotionConfigured(branch, env string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintPromotionConfigured", branch, env)
}

// PrintPromotionConfigured indicates an expected call of PrintPromotionConfigured.
func (mr *MockPromptMockRecorder) PrintPromotionConfigured(branch, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintPromotionConfigured", reflect.TypeOf((*MockPrompt)(nil).PrintPromotionConfigured), branch, env)
}

// PrintPromotionDisabled mocks base method.
func (m *MockPrompt) PrintPromotionDisabled(branch string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintPromotionDisabled", branch)
}

// PrintPromotionDisabled indicates an expected call of PrintPromotionDisabled.
func (mr *MockPromptMockRecorder) PrintPromotionDisabled(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintPromotionDisabled", reflect.TypeOf((*MockPrompt)(nil).PrintPromotionDisabled), branch)
}

// WhetherToCreateMissingPullRequest mocks base method.
func (m *MockPrompt) WhetherToCreateMissingPullRequest() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhetherToCreateMissingPullRequest")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhetherToCreateMissingPullRequest indicates an expected call of WhetherToCreateMissingPullRequest.
func (mr *MockPromptMockRecorder) WhetherToCreateMissingPullRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhetherToCreateMissingPullRequest", reflect.TypeOf((*MockPrompt)(nil).WhetherToCreateMissingPullRequest))
}

// WhichEnvironmentToPromoteTo mocks base method.
func (m *MockPrompt) WhichEnvironmentToPromoteTo(environments []string, preSelectedEnv string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhichEnvironmentToPromoteTo", environments, preSelectedEnv)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhichEnvironmentToPromoteTo indicates an expected call of WhichEnvironmentToPromoteTo.
func (mr *MockPromptMockRecorder) WhichEnvironmentToPromoteTo(environments, preSelectedEnv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhichEnvironmentToPromoteTo", reflect.TypeOf((*MockPrompt)(nil).WhichEnvironmentToPromoteTo), environments, preSelectedEnv)
}
